# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

#event trigger
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    
    ##jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    ##gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    ## create application.properties
    - name: make application.properties
      if: contains(github.ref, 'main')
      run: |
          mkdir -p src/main/resources
          touch src/main/resources/application.properties
          echo "${{ secrets.PROPERTIES_DEV }}" > src/main/resources/application.properties
      shell: bash
      
    ## gradle build
    - name: Build with Gradle
      run: |
        cd plot-server
        ./gradlew clean build -x test
      shell: bash
      
   ## docker build & push to develop
    - name: Docker build & push to dev
      if: contains(github.ref, 'main')
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        cd plot-server
        docker build -t ${{ secrets.DOCKER_REPO }}:plot-server .
        docker push ${{ secrets.DOCKER_REPO }}:plot-server
        
      
   ## deploy to develop
    - name: Deploy to dev
      uses: appleboy/ssh-action@master
      id: deploy-dev
      if: contains(github.ref, 'main')
      with:
        host: ${{ secrets.HOST_DEV }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD  }}
        ports: 22
        #key : ${{ secrets.PRIVATE_KEY }}
        scripts: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}:plot-server
            docker-compose up -d
            docker image prune -f
